import requests
from datetime import datetime
from twilio.rest import Client
from googletrans import Translator
from twilio.http.http_client import TwilioHttpClient

# Twilio account credentials
account_sid = "ACc75f2bb57ec5ca1b4f973b5cb6059313"  # Replace with your actual Account SID
AUTH_TOKEN = "3cf63b04907a01aad020b728e6a5a3e4"     # Replace with your actual Auth Token
FROM_WHATSAPP_NUMBER = "whatsapp:+14155238886"       # Twilio Sandbox WhatsApp number
TO_WHATSAPP_NUMBER = "whatsapp:+19175934747"         # Replace with the recipient's WhatsApp number

STOCK_NAME = "TSLA"
COMPANY_NAME = "Tesla Inc"

STOCK_ENDPOINT = "https://www.alphavantage.co/query"
STOCK_API_KEY = "5SSHZVJEDANG7BGW"  # Replace with your actual API key

# This endpoint needs to be replaced from https://newsapi.org/ regularly else code wont run
NEWS_ENDPOINT = "https://newsapi.org/v2/everything?q=tesla&from=2024-09-08&sortBy=publishedAt&apiKey=ee704094f7dd406e87ff0a4196f40adb"
NEWS_API_KEY = "ee704094f7dd406e87ff0a4196f40adb"  # Replace with your actual News API key

# Parameters for the stock API request
params = {
    'function': 'TIME_SERIES_DAILY',
    'symbol': STOCK_NAME,
    'apikey': STOCK_API_KEY
}

# Fetch the data from the API
response = requests.get(STOCK_ENDPOINT, params=params)
data = response.json()

# Get yesterday's closing stock price.
# e.g. [new_value for (key, value) in dictionary.items()]
# Parse yesterdays closing stock price
# Access the 'Time Series (Daily)' data

time_series = data['Time Series (Daily)']

# Get the list of dates sorted in descending order (most recent first)
dates = sorted(time_series.keys(), reverse=True)

# Determine the index for yesterday's date
today_str = datetime.now().strftime('%Y-%m-%d')

if dates[0] == today_str:
    # If today's data is available, yesterday's data is at index 1
    yesterdays_index = 1
else:
    # If today's data is not available, yesterday's data is at index 0
    yesterdays_index = 0

# Use list comprehension to extract yesterday's closing price
yesterdays_closing_price = [
    float(time_series[date]['4. close'])
    for date in dates[yesterdays_index:yesterdays_index + 1]][0]

two_days_ago_closing_price = [
    float(time_series[date]['4. close'])
    for date in dates[yesterdays_index + 1:yesterdays_index + 2]][0]

print(f"Yesterday's closing price ({dates[yesterdays_index]}) was {yesterdays_closing_price}")

# Get the day before yesterday's closing stock price
print(f"Yesterday's closing price ({dates[yesterdays_index - 1]}) was {two_days_ago_closing_price}")

# Find the positive difference between 1 and 2. e.g. 40 - 20 = -20, but the positive difference is 20.
# https://www.w3schools.com/python/ref_func_abs.asp
stock_gain_yesterday = abs(yesterdays_closing_price - two_days_ago_closing_price)
print(stock_gain_yesterday)

# Get the percentage difference in price between closing price yesterday and closing price the day before yesterday.
stock_gain_yesterday = (yesterdays_closing_price / two_days_ago_closing_price - 1) * 100
stock_gain_yesterday_percentage = f"{stock_gain_yesterday:.2f}%"
print(f"Yesterdays stock gain percentage was {stock_gain_yesterday_percentage}")

# If stock_gain_yesterday_percentage is greater than 5 then print("Get News").
if stock_gain_yesterday > 5:
    print("Get News")

# https://newsapi.org/
# Instead of printing ("Get News"), actually get the first 3 news pieces for the COMPANY_NAME.
# Use Python slice operator to create a list that contains the first 3 articles.
# Hint: https://stackoverflow.com/questions/509211/understanding-slice-notation

news_response = requests.get(NEWS_ENDPOINT)
data2 = news_response.json()  # Parse JSON response
articles = data2['articles']
print(data2)  # Print the entire response to inspect

for item in articles[:3]:  # Access first 3 items
    print(item)

# Use twilio.com/docs/sms/quickstart/python
# to send a separate message with each article's title and description to your phone number.
# Create a new list of the first 3 article's title and description using list comprehension.

translator = Translator()
top_3_articles = [
    {"title": translator.translate(article["title"], dest='en').text,
     "description": translator.translate(article["description"], dest='en').text}
    for article in articles[:3]
]
print(top_3_articles)

#
# Send each article as a separate message via Twilio.
# # # Initialize the Twilio Client
client = Client(account_sid, AUTH_TOKEN)

# Send each article as a separate WhatsApp message
# https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn?frameUrl=%2Fconsole%2Fsms%2Fwhatsapp%2Flearn%3Fx-target-region%3Dus1
# Use link above and open Twilio sandbox on WhatsApp
# Send the following message to allow messages from Twilio Sandbox on WhatsApp: join continued-sharp
for article in top_3_articles:
# Create the message text
    message_text = f"Title: {article['title']}\nDescription: {article['description']}"

    # Send the message via WhatsApp using Twilio
    message = client.messages.create(
        body=message_text,
        from_=FROM_WHATSAPP_NUMBER,  # Use `from_` to specify the Twilio WhatsApp sender number
        to=TO_WHATSAPP_NUMBER        # Specify the recipient's WhatsApp number
    )

    print(f"Sent WhatsApp message with SID: {message.status}")

# Remaining Extra Tasks - Format the message like this:
"""
TSLA: ðŸ”º2%
Headline: Were Hedge Funds Right About Piling Into Tesla Inc. (TSLA)?. 
Brief: We at Insider Monkey have gone over 821 13F filings that hedge funds and prominent investors are required to file by the SEC The 13F filings show the funds' and investors' portfolio positions as of March 31st, near the height of the coronavirus market crash.
or
"TSLA: ðŸ”»5%
Headline: Were Hedge Funds Right About Piling Into Tesla Inc. (TSLA)?. 
Brief: We at Insider Monkey have gone over 821 13F filings that hedge funds and prominent investors are required to file by the SEC The 13F filings show the funds' and investors' portfolio positions as of March 31st, near the height of the coronavirus market crash.
"""
